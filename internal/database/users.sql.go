// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const activateUser = `-- name: ActivateUser :one
UPDATE users
SET is_active = true
WHERE id = $1
RETURNING id, created_at, updated_at, username, email, password, first_name, last_name, is_deleted, is_active, role_id
`

func (q *Queries) ActivateUser(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, activateUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.IsDeleted,
		&i.IsActive,
		&i.RoleID,
	)
	return i, err
}

const createInvitation = `-- name: CreateInvitation :exec
INSERT INTO user_invitations (token, user_id, expires_at)
VALUES ($1, $2, $3)
`

type CreateInvitationParams struct {
	Token     []byte
	UserID    pgtype.UUID
	ExpiresAt pgtype.Timestamp
}

func (q *Queries) CreateInvitation(ctx context.Context, arg CreateInvitationParams) error {
	_, err := q.db.Exec(ctx, createInvitation, arg.Token, arg.UserID, arg.ExpiresAt)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, created_at, updated_at, username, email, password)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateUserParams struct {
	ID        pgtype.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	Username  string
	Email     string
	Password  []byte
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Username,
		arg.Email,
		arg.Password,
	)
	return err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM user_invitations
WHERE token = $1
`

func (q *Queries) DeleteToken(ctx context.Context, token []byte) error {
	_, err := q.db.Exec(ctx, deleteToken, token)
	return err
}

const getInvitation = `-- name: GetInvitation :one
SELECT user_id
FROM user_invitations
WHERE token = $1 AND expires_at > $2
`

type GetInvitationParams struct {
	Token     []byte
	ExpiresAt pgtype.Timestamp
}

func (q *Queries) GetInvitation(ctx context.Context, arg GetInvitationParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, getInvitation, arg.Token, arg.ExpiresAt)
	var user_id pgtype.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, username, email, password, first_name, last_name, is_deleted, is_active, role_id FROM users
WHERE email = $1
	AND is_deleted = false
	AND is_active = true
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.IsDeleted,
		&i.IsActive,
		&i.RoleID,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT
	u.id, u.created_at, u.updated_at, u.username, u.email, u.password, u.first_name, u.last_name, u.is_deleted, u.is_active, u.role_id, r.level, r.name
FROM users u
JOIN roles r ON u.role_id = r.id
WHERE u.username = $1
	AND is_deleted = false
	AND is_active = true
`

type GetUserByUsernameRow struct {
	ID        pgtype.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	Username  string
	Email     string
	Password  []byte
	FirstName pgtype.Text
	LastName  pgtype.Text
	IsDeleted bool
	IsActive  bool
	RoleID    int32
	Level     int32
	Name      string
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.IsDeleted,
		&i.IsActive,
		&i.RoleID,
		&i.Level,
		&i.Name,
	)
	return i, err
}

const hardDeleteUserByID = `-- name: HardDeleteUserByID :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) HardDeleteUserByID(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, hardDeleteUserByID, id)
	return err
}

const softDeleteUserByID = `-- name: SoftDeleteUserByID :exec
UPDATE users
SET is_deleted = true
WHERE id = $1
`

func (q *Queries) SoftDeleteUserByID(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, softDeleteUserByID, id)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
	updated_at = $1,
	username = coalesce($3, username),
	email = coalesce($4, email),
	first_name = coalesce($5, first_name),
	last_name = coalesce($6, last_name),
	password = coalesce($7, password)
WHERE id = $2 AND is_deleted = false
RETURNING id, created_at, updated_at, username, email, password, first_name, last_name, is_deleted, is_active, role_id
`

type UpdateUserParams struct {
	UpdatedAt pgtype.Timestamp
	ID        pgtype.UUID
	Username  pgtype.Text
	Email     pgtype.Text
	FirstName pgtype.Text
	LastName  pgtype.Text
	Password  []byte
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.UpdatedAt,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.IsDeleted,
		&i.IsActive,
		&i.RoleID,
	)
	return i, err
}
