// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: search.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const searchPosts = `-- name: SearchPosts :many
SELECT
    p.id, p.title, p.content, p.created_at, p.tags,
    author.id AS author_id, author.username, COUNT(c.id) AS comment_count
FROM posts p
LEFT JOIN comments c ON c.post_id = p.id
LEFT JOIN users author ON p.user_id = author.id
WHERE
    ($3::text IS NULL OR p.content ILIKE '%' || $3 || '%' OR p.title ILIKE '%' || $3 || '%')
    AND ($4::text[] IS NULL OR p.tags && $4)
    AND ($5::timestamp IS NULL OR p.created_at >= $5)
    AND ($6::timestamp IS NULL OR p.created_at <= $6)
GROUP BY p.id, author.id, author.username
ORDER BY
	CASE WHEN $7::boolean THEN p.created_at END DESC,
	CASE WHEN NOT $7::boolean THEN p.created_at END ASC,
	comment_count DESC
LIMIT $1 OFFSET $2
`

type SearchPostsParams struct {
	Limit  int32
	Offset int32
	Search string
	Tags   []string
	Since  pgtype.Timestamp
	Until  pgtype.Timestamp
	Sort   bool
}

type SearchPostsRow struct {
	ID           pgtype.UUID
	Title        string
	Content      string
	CreatedAt    pgtype.Timestamp
	Tags         []string
	AuthorID     pgtype.UUID
	Username     pgtype.Text
	CommentCount int64
}

func (q *Queries) SearchPosts(ctx context.Context, arg SearchPostsParams) ([]SearchPostsRow, error) {
	rows, err := q.db.Query(ctx, searchPosts,
		arg.Limit,
		arg.Offset,
		arg.Search,
		arg.Tags,
		arg.Since,
		arg.Until,
		arg.Sort,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchPostsRow
	for rows.Next() {
		var i SearchPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.Tags,
			&i.AuthorID,
			&i.Username,
			&i.CommentCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
