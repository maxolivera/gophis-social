// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: comments.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCommentInPost = `-- name: CreateCommentInPost :exec
INSERT INTO comments (id, user_id, post_id, created_at, updated_at, content)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateCommentInPostParams struct {
	ID        pgtype.UUID
	UserID    pgtype.UUID
	PostID    pgtype.UUID
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	Content   string
}

func (q *Queries) CreateCommentInPost(ctx context.Context, arg CreateCommentInPostParams) error {
	_, err := q.db.Exec(ctx, createCommentInPost,
		arg.ID,
		arg.UserID,
		arg.PostID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Content,
	)
	return err
}

const getCommentsByPost = `-- name: GetCommentsByPost :many
SELECT comments.post_id, comments.id, comments.content, users.username, users.email, users.first_name, comments.created_at
FROM comments
LEFT JOIN users ON comments.user_id = users.id
WHERE comments.post_id = $1
ORDER BY comments.created_at DESC
`

type GetCommentsByPostRow struct {
	PostID    pgtype.UUID
	ID        pgtype.UUID
	Content   string
	Username  pgtype.Text
	Email     pgtype.Text
	FirstName pgtype.Text
	CreatedAt pgtype.Timestamp
}

func (q *Queries) GetCommentsByPost(ctx context.Context, postID pgtype.UUID) ([]GetCommentsByPostRow, error) {
	rows, err := q.db.Query(ctx, getCommentsByPost, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCommentsByPostRow
	for rows.Next() {
		var i GetCommentsByPostRow
		if err := rows.Scan(
			&i.PostID,
			&i.ID,
			&i.Content,
			&i.Username,
			&i.Email,
			&i.FirstName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
