// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feed.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getUserFeed = `-- name: GetUserFeed :many
SELECT
	p.id, p.title, p.content, p.created_at, p.tags,
	author.id, author.username, COUNT(c.id) AS comment_count
FROM posts p
LEFT JOIN comments c ON c.post_id = p.id
LEFT JOIN users author ON p.user_id = author.id
JOIN followers f ON f.follower_id = p.user_id OR p.user_id = $1
WHERE f.user_id = $1 OR p.user_id = $1
GROUP BY p.id, author.id, author.username
ORDER BY
	CASE
		WHEN NOT $4::boolean THEN p.created_at END ASC,
	CASE
		WHEN $4::boolean THEN p.created_at END DESC
LIMIT $2 OFFSET $3
`

type GetUserFeedParams struct {
	UserID pgtype.UUID
	Limit  int32
	Offset int32
	Sort   bool
}

type GetUserFeedRow struct {
	ID           pgtype.UUID
	Title        string
	Content      string
	CreatedAt    pgtype.Timestamp
	Tags         []string
	ID_2         pgtype.UUID
	Username     pgtype.Text
	CommentCount int64
}

func (q *Queries) GetUserFeed(ctx context.Context, arg GetUserFeedParams) ([]GetUserFeedRow, error) {
	rows, err := q.db.Query(ctx, getUserFeed,
		arg.UserID,
		arg.Limit,
		arg.Offset,
		arg.Sort,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserFeedRow
	for rows.Next() {
		var i GetUserFeedRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.Tags,
			&i.ID_2,
			&i.Username,
			&i.CommentCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
